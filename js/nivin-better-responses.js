// Nivin Better Response Templates
// Centro M√©dico Universal

const NIVIN_RESPONSES = {
    // INSTEAD OF: "Perfecto. ¬øCon cu√°l doctor(a) desea agendar su cita?"
    // USE THIS:
    doctorSelection: `
¬øC√≥mo prefiere seleccionar su doctor?

1Ô∏è‚É£ VER ESPECIALISTAS DISPONIBLES
2Ô∏è‚É£ BUSCAR POR NOMBRE DE DOCTOR
3Ô∏è‚É£ VER TODOS LOS DOCTORES HOY
4Ô∏è‚É£ PR√ìXIMA CITA DISPONIBLE

O escriba directamente:
‚Ä¢ Nombre del doctor (ej: "Dr. Castillo")
‚Ä¢ Especialidad (ej: "Cardiolog√≠a")
‚Ä¢ S√≠ntoma (ej: "dolor de cabeza")
    `,
    
    // When showing available specialists
    showSpecialists: `
üìã ESPECIALISTAS DISPONIBLES HOY:

CARDIOLOG√çA (3 doctores)
‚úÖ Dr. Joaqu√≠n Ram√≠rez - 2:00 PM, 4:00 PM
‚úÖ Dr. Juan Pe√±a - 3:00 PM
‚úÖ Dr. Oscar Hache - 5:00 PM

PEDIATR√çA (5 doctores)
‚úÖ Dra. Ana Torres - 9:00 AM, 10:00 AM
‚úÖ Dr. Luis Mart√≠nez - 11:00 AM, 2:00 PM
[Ver m√°s pediatras...]

GINECOLOG√çA (4 doctores)
‚úÖ Dra. Vidalva Medina - 3:00 PM, 4:00 PM
‚úÖ Dra. Carmen V√°squez - 10:00 AM
[Ver m√°s ginec√≥logos...]

Escriba el n√∫mero de la especialidad o el nombre del doctor.
    `,
    
    // When user types a doctor name
    doctorSearch: (searchTerm) => {
        return `
Buscando "${searchTerm}"...

RESULTADOS:
1. Dr. Manuel Antonio Castillo - Salud Sexual
   ‚úÖ HOY: 2:00 PM, 3:00 PM, 5:00 PM
   
2. Dr. Pedro Rafael Castillo - Gastroenterolog√≠a
   ‚úÖ HOY: 10:00 AM, 11:00 AM
   
3. Dr. Castillo Rodr√≠guez - Medicina Interna
   ‚úÖ MA√ëANA: 9:00 AM, 10:00 AM

Seleccione 1, 2 o 3 para ver calendario completo.
        `;
    },
    
    // Quick options menu
    quickMenu: `
¬øQU√â NECESITA?

üî¥ EMERGENCIA ‚Üí Ir a emergencias ahora
üü° HOY ‚Üí Ver doctores disponibles hoy
üü¢ ESTA SEMANA ‚Üí Buscar cita esta semana

BUSCAR POR:
üìã Especialidad (escriba: "cardi√≥logo")
üë®‚Äç‚öïÔ∏è Doctor (escriba: "Dr. Ram√≠rez")
ü§í S√≠ntoma (escriba: "dolor de pecho")

O escriba "ayuda" para m√°s opciones.
    `,
    
    // When showing a single doctor's availability
    doctorCalendar: (doctor) => {
        return `
üìÖ ${doctor.name}
${doctor.specialty}

HOY (Viernes 25):
‚úÖ 2:00 PM - Disponible
‚úÖ 3:00 PM - Disponible
‚ùå 4:00 PM - Ocupado
‚úÖ 5:00 PM - Disponible

MA√ëANA (S√°bado 26):
‚úÖ 9:00 AM - Disponible
‚úÖ 10:00 AM - Disponible

Para reservar escriba:
‚Ä¢ "HOY 2PM"
‚Ä¢ "MA√ëANA 9AM"
‚Ä¢ "PR√ìXIMA" (siguiente disponible)
        `;
    },
    
    // Intelligent prompts based on user behavior
    smartPrompts: {
        noInput: "Puedo buscar por s√≠ntoma, especialidad o nombre del doctor. ¬øQu√© prefiere?",
        unclear: "No entend√≠. ¬øBusca un doctor espec√≠fico o una especialidad?",
        noAvailability: "No hay disponibilidad hoy. ¬øVeo ma√±ana o lista de espera?",
        multipleOptions: "Encontr√© varias opciones. ¬øCu√°l prefiere?"
    }
};

// Function to handle user input intelligently
function processUserInput(input) {
    const lowerInput = input.toLowerCase().trim();
    
    // Check if it's a number selection
    if (/^[1-9]$/.test(input)) {
        return { type: 'number_selection', value: parseInt(input) };
    }
    
    // Check if it's a doctor name
    if (lowerInput.includes('dr.') || lowerInput.includes('dra.')) {
        return { type: 'doctor_search', value: input };
    }
    
    // Check if it's a specialty
    const specialties = [
        'cardiolog√≠a', 'pediatr√≠a', 'ginecolog√≠a', 'ortopedia',
        'neurolog√≠a', 'dermatolog√≠a', 'gastroenterolog√≠a', 'urolog√≠a'
    ];
    
    for (const specialty of specialties) {
        if (lowerInput.includes(specialty)) {
            return { type: 'specialty_search', value: specialty };
        }
    }
    
    // Check if it's a symptom
    const symptoms = [
        'dolor', 'fiebre', 'tos', 'mareo', 'n√°usea', 
        'alergia', 'fractura', 'embarazo'
    ];
    
    for (const symptom of symptoms) {
        if (lowerInput.includes(symptom)) {
            return { type: 'symptom_search', value: input };
        }
    }
    
    // Check for time preferences
    if (lowerInput.includes('hoy') || lowerInput.includes('ahora')) {
        return { type: 'today_request' };
    }
    
    if (lowerInput.includes('ma√±ana')) {
        return { type: 'tomorrow_request' };
    }
    
    if (lowerInput.includes('urgente') || lowerInput.includes('emergencia')) {
        return { type: 'emergency' };
    }
    
    // Default
    return { type: 'unclear', value: input };
}

// Better interaction flow
function generateSmartResponse(userInput) {
    const processed = processUserInput(userInput);
    
    switch(processed.type) {
        case 'doctor_search':
            return NIVIN_RESPONSES.doctorSearch(processed.value);
            
        case 'specialty_search':
            return showSpecialtyDoctors(processed.value);
            
        case 'symptom_search':
            return findDoctorBySymptom(processed.value);
            
        case 'today_request':
            return NIVIN_RESPONSES.showSpecialists;
            
        case 'emergency':
            return emergencyResponse();
            
        case 'unclear':
        default:
            return NIVIN_RESPONSES.quickMenu;
    }
}

// Export for use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        NIVIN_RESPONSES,
        processUserInput,
        generateSmartResponse
    };
}
